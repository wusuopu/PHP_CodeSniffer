#!/usr/bin/env php
<?php
/**
 * PHP_CodeSniffer tokenises PHP code and detects violations of a
 * defined set of coding standards.
 *
 * PHP version 5
 *
 * @category  PHP
 * @package   PHP_CodeSniffer
 * @author    Greg Sherwood <gsherwood@squiz.net>
 * @author    Marc McIntyre <mmcintyre@squiz.net>
 * @copyright 2006-2014 Squiz Pty Ltd (ABN 77 084 670 600)
 * @license   https://github.com/squizlabs/PHP_CodeSniffer/blob/master/licence.txt BSD Licence
 * @link      http://pear.php.net/package/PHP_CodeSniffer
 */

error_reporting(E_ALL | E_STRICT);

// Optionally use PHP_Timer to print time/memory stats for the run.
// Note that the reports are the ones who actually print the data
// as they decide if it is ok to print this data to screen.
@include_once 'PHP/Timer.php';
if (class_exists('PHP_Timer', false) === true) {
    PHP_Timer::start();
}

if (is_file(dirname(__FILE__).'/../CodeSniffer/CLI.php') === true) {
    include_once dirname(__FILE__).'/../CodeSniffer/CLI.php';
} else {
    include_once 'PHP/CodeSniffer/CLI.php';
}

/**
 * Check specific files that config in the composer.json file
 * with `extra` field and 'phpcs-file-list' parameter.
 *
 * @return array
 */
function parserCompserConfig()
{
    $cwd = getcwd();
    $value = array("standard" => array("symfony2"));
    $fileName = $cwd.'/composer.json';
    if (!file_exists($fileName)) {
        exit(1);
    }

    try {
        $info = json_decode(file_get_contents($fileName), true);
    } catch(Exception $e) {
        exit(1);
    }

    if (isset($info['extra']) && isset($info['extra']['phpcs-file-list'])) {
        $res = array();
        if (gettype($info['extra']['phpcs-file-list']) === "string") {
            $files = array($info['extra']['phpcs-file-list']);
        } else {
            $files = $info['extra']['phpcs-file-list'];
        }

        foreach ($files as $file) {
            if (!file_exists($file)) {
                continue;
            }
            array_push($res, $file);
        }
        if (!empty($res)) {
            return array_merge($value, array("files" => $res));
        }
    }

    exit(1);
}

$phpcs = new PHP_CodeSniffer_CLI();
$phpcs->checkRequirements();

$numErrors = $phpcs->process(parserCompserConfig());
if ($numErrors === 0) {
    exit(0);
} else {
    exit(1);
}

?>
